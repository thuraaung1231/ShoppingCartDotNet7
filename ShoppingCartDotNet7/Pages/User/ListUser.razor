@page "/UserList"
@using System.Net.Http.Json
@inject HttpClient httpClient
@using MudBlazor
@inject IAPIRoute ApiRoute
@using Newtonsoft.Json
@inject NavigationManager navigate

<MudDataGrid T="UserModel" MultiSelection="true" Items="@UserList" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
    Hideable="true" RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="UserModel" />
        <PropertyColumn Property="x => x.Id" Title="Nr" Sortable="false" Filterable="false" />
        <PropertyColumn Property="x => x.Name" SortBy="@_sortBy" />
        <PropertyColumn Property="x => x.Email" />
       
        <PropertyColumn Property="x => x.Address" />
        <TemplateColumn Filterable="false" Title="Edit" Class="mx-auto">
            <CellTemplate Context="context">
                <MudButton Variant="Variant.Filled" Color="Color.Tertiary" @onclick="(() => EditUser(context.Item.Id))">
                    <i class="fa-solid fa-pen-to-square me-1"></i>edit
                </MudButton>
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Filterable="false" Title="Delete" Class="mx-auto">
            <CellTemplate Context="context">
                <MudButton Variant="Variant.Filled" Color="Color.Error" @onclick="(()=>DeleteUser(context.Item.Id))" data-bs-toggle="modal" data-bs-target="#exampleModal"><i class="fa-solid fa-trash me-1"></i>delete</MudButton>

            </CellTemplate>
        </TemplateColumn>
      
    </Columns>
    <PagerContent>
        <MudDataGridPager T="UserModel" />
    </PagerContent>
</MudDataGrid>

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Modal title</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are You Sure To Delete?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="()=>DeleteConfirm(userId)">Delete</button>
            </div>
        </div>
    </div>
</div>

@code {
    List<UserModel> UserList = new List<UserModel>();
    ResponseModel responseModel = new ResponseModel();
    public string Message;
    private string _searchString;
    public int userId;
    private bool _sortNameByLength;
    private List<string> _events = new();
    // custom sort by name length
    private Func<UserModel, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Name.Length;
        else
            return x.Name;
    };
    // quick filter - filter globally across multiple columns with the same input
    private Func<UserModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Address} {x.Id}".Contains(_searchString))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        responseModel = await ApiRoute.GetUserList();
        if (responseModel.ResCode == "I001")
        {
            UserList = JsonConvert.DeserializeObject<List<UserModel>>(responseModel.ResData.ToString());
        }
        else
        {
            Message = "Failed to get User List";
        }
    }

    // events
    void RowClicked(DataGridRowClickEventArgs<UserModel> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void RowRightClicked(DataGridRowClickEventArgs<UserModel> args)
    {
        _events.Insert(0, $"Event = RowRightClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<UserModel> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }



    private void DeleteUser(int id)
    {
        userId = id;
    }
    private async void DeleteConfirm(int id)
    {
        responseModel = await ApiRoute.DeleteUser(id);
        if (responseModel.ResCode == "I001")
        {

            navigate.NavigateTo(navigate.Uri, forceLoad: true);
        }


        navigate.NavigateTo("UserList");
    }
    private async void EditUser(int id)
    {
        navigate.NavigateTo($"EditUser/{id}");
    }
}